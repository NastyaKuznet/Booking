version: '3.8'

services:
  rabbit:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - my-network

  bookingservice:
    build: 
      context: ./bookingservice
    depends_on:
      - postgres
      - rabbit
    ports:
      - "50052:50052"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      DB_SSL_MODE: disable
    networks:
      - my-network
  
  authservice:
    build: 
      context: ./authorizationservice
    depends_on:
      - postgres
      - rabbit
    ports:
      - "50053:50053"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      DB_SSL_MODE: disable
    networks:
      - my-network
  
  mainservice:
    build:
      context: ./mainservice
    ports:
      - "8021:8021"
    depends_on:
      - bookingservice
      - authservice
    networks:
      - my-network
  
  consumer:
    build:
      context: ./notificationservice
    depends_on:
      rabbit:
        condition: service_healthy
    networks:
      - my-network

networks:
  my-network:
    name: my-network

volumes:
  postgres-data:
